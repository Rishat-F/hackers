# Шпаргалка по терминалу Линукса


КОМАНДЫ LINUX ДЛЯ УПРАВЛЕНИЯ ФАЙЛАМИ
1. LS
Утилита для просмотра содержимого каталогов. По умолчанию показывает текущий каталог. Если в параметрах указать путь, то она перечислит содержимое конечного каталога. Полезные опции -l (List) и -a (All). Первая форматирует вывод в виде списка с более подробной информацией, а вторая включает показ скрытых файлов. 
	$ ls опции /путь/к/папке

	Опции команды указывают как именно и в каком виде нужно выводить информацию на экран, а путь, это та папка, которую нужно отобразить. Рассмотрим основные опции утилиты:

	-a - отображать все файлы, включая скрытые, это те, перед именем которых стоит точка;
	-l - выводить подробный список, в котором будет отображаться владелец, группа, дата создания, размер и другие параметры.

2. CAT
Печатает содержимое файла, переданного в параметре, в стандартный вывод. Если передать несколько файлов, команда склеит их. Также можно перенаправить вывод в ещё один файл с помощью символа '>'. Если нужно вывести только определенное количество строк, используйте опцию -n (Number).
	$ cat опции файл1 файл2 ...

	Вы можете передать утилите несколько файлов и тогда их содержимое будет выведено поочередно, без разделителей. Опции позволяют очень сильно видоизменить вывод и сделать именно то, что вам нужно. Рассмотрим основные опции:

	-b - нумеровать только непустые строки;
	-E - показывать символ $ в конце каждой строки;
	-n - нумеровать все строки;
	-s - удалять пустые повторяющиеся строки;
	-T - отображать табуляции в виде ^I;
	-h - отобразить справку;
	-v - версия утилиты.

3. CD
Позволяет перейти из текущего каталога в указанный. Если запустить без параметров - возвращает в домашний каталог. Вызов с двумя точками возвращает на уровень вверх относительно текущего каталога. Вызов с тире (cd -) возвращает к предыдущему каталогу. 
	$ cd опции папка_назначения

	Опций всего две, это -P и -L. Они влияют на то, как будут обрабатываться символы возврата в предыдущую директорию и символические ссылки:

	-P - позволяет следовать по символическим ссылкам перед тем, как будут обработаны все переходы "..";
	-L - переходит по символическим ссылкам только после того, как были обработаны "..";
	-e - если папку, в которую нужно перейти не удалось найти - выдает ошибку.

4. PWD
Печатает на экран текущий каталог. Это может быть полезно, если ваша командная строка Linux не выводит такую информацию. Эта команда будет востребована в Bash программировании, где для получения ссылки на каталог выполняется скрипт.
	$ pwd опции

	Вот основные опции, которые вы можете использовать для настройки вывода утилиты:

	-L, --logical - брать директорию из переменной окружения, даже если она содержит символические ссылки;
	-P - отбрасывать все символические ссылки;
	--help - отобразить справку по утилите;
	--version - отобразить версию утилиты.

5. MKDIR
Создание новых каталогов. Наиболее удобная опция -p (Parents), позволяет создать всю структуру подкаталогов одной командой, даже если они ещё не существуют.
	$ mkdir опции имя_папки

	Опций в утилиты не так много, а передавать программе вы чаще всего будете только один параметр - имя папки

	Для создания новой папки в терминале наберите следующую команду:

	 $ mkdir папка

6. FILE
Команда file показывает тип файла. В Linux файлы не обязаны всегда иметь расширения для того, чтобы с ними работать. Поэтому пользователю иногда трудно определить, что за файл перед ним. Эта маленькая утилита решает проблему.
	$ file опции название_документа

	Для того, чтобы ознакомиться с полным списком опций, выполните в терминале команду:

	$ man file

7. CP
Копирование файлов и каталогов. Она не копирует каталоги по умолчанию рекурсивно (то есть все поддиректории и все файлы в поддиректориях), поэтому не забудьте добавить опцию -r (Recursive) или -a (Archive). Последняя включает режим сохранения атрибутов, владельца и временного штампа в дополнение к рекурсивному копированию.
	Общий синтаксис cp выглядит вот так:

	$ cp опции файл-источник файл-приемник

8. MV
Перемещение или переименование файлов и каталогов. Примечательно, что в Linux это одна и та же операция. Переименование - это перемещение файла в ту же папку с другим именем.
	$ mv опции файл-источник файл-приемник

	Теперь рассмотрим основные опции утилиты, которые могут вам понадобиться:

	-f - заменять файл, если он уже существует;
	-i - спрашивать, нужно ли заменять существующие файлы;
	-n - не заменять существующие файлы;
	-u - заменять файл только если он был изменен;
	-v - вывести список обработанных файлов;
	Чтобы переименовать файл linux достаточно вызвать утилиту без дополнительных опций. Просто передав ей имя нужного файла и новое имя:

	 $ mv file newfile

9. RM
Удаляет файлы и папки. Очень полезная команда Linux: с её помощью вы можете убрать весь беспорядок. Если нужно рекурсивное удаление, используйте опцию -r. Однако будьте осторожны: конечно, для того чтобы повредить систему вам нужно будет серьёзно постараться, однако можно удалить собственные важные файлы. Rm удаляет файлы не в корзину, из которой потом всё можно будет восстановить, а полностью стирает. Действия оператора rm необратимы. Поверьте, ваши оправдания в духе "rm съела мою курсовую" никому не будут интересны. 
	Чтобы удалить файл linux достаточно передать в параметрах команде адрес файла в файловой системе:

	 $ rm /home/user/file

	Чтобы удалить все файлы, начинающиеся на слово file можно использовать специальный символ *, означает любой символ в любом количестве:

	 $ rm /home/user/file*

	Эта команда удаления файла в linux должна использоваться очень осторожно, чтобы не удалить ничего лишнего. 
	
LINUX КОМАНДЫ КОНСОЛИ ДЛЯ РАБОТЫ С ТЕКСТОМ
10. MORE / LESS
Это две простенькие команды терминала для просмотра длинных текстов, которые не вмещаются на одном экране. Представьте себе очень длинный вывод команды. Или вы вызвали cat для просмотра файла, и вашему эмулятору терминала потребовалось несколько секунд, чтобы прокрутить весь текст. Если ваш терминал не поддерживает прокрутки, вы можете сделать это с помощью less. Less новее, чем more и поддерживает больше опций, поэтому использовать more нет причин.
	less:
	Запись команды less в терминале выглядит так:
	
	$ команда опции файл
	
	more:
	$ more опции файл

11. SORT
Сортировка строк текста по различным критериям. Наиболее полезные опции: -n (Numeric), по числовому значению, и -r (Reverse), которая переворачивает вывод. Это может быть полезно для сортировки вывода du. Например, если хотите отсортировать файлы по размеру, просто соедините эти команды.
	$ sort опции файл

	Или

	$ команда | sort опции

	Основные опции утилиты sort.

	-o - вывести результат в файл
	-u - игнорировать повторяющиеся строки
	-k - указать поле по которому нужно сортировать строки, если не задано, сортировка выполняется по всей строке

КОМАНДЫ LINUX ОКРУЖЕНИЯ ПОЛЬЗОВАТЕЛЯ
12. SU / SUDO
Su и sudo - это два способа выполнить одну и ту же задачу: запустить программу от имени другого пользователя. В зависимости от вашего дистрибутива вы, наверное, используете одну или другую. Но работают обе. Разница в том, что su переключает вас на другого пользователя, а sudo только выполняет команду от его имени. Поэтому использование sudo будет наиболее безопасным вариантом работы. 
	$ su опции пользователь

	Вот ее основные опции:

	-c, --command - выполнить команду
	-g, --group - установить основную группу пользователя (только для root)
	-G --supp-group - дополнительные группы пользователя (только для root)
	-, -l, --login - режим входа, будут очищены и инициализированы с учетом нового пользователя все переменные окружения, а также изменен домашний каталог
	-p, --preserve-environment - сохранить переменные окружения
	-s, --shell - задать оболочку для входа
	--version - отобразить версию программы.

LINUX КОМАНДЫ ДЛЯ ПРОСМОТРА ДОКУМЕНТАЦИИ
13. MAN / WHATIS
Команда man открывает руководство по определённой команде. Для всех основных команд Linux есть man страницы. Whatis показывает, какие разделы руководств есть для данной команды.

14. WHEREIS
Показывает полный путь к исполняемому файлу программы. Также может показать путь к исходникам, если они есть в системе.

